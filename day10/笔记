笔记

1.函数

	+----------------------------------------------------------
	| Number()/parseInt()/parseFloat()/alert()/prompt()
	| JS中函数分为系统函数和自定义函数
	| function:功能体，可以接受若干个数据，返回处理的结果。用于封装重复执行的代码
	+-------------------------------------------------------------------------

	（1）创建普通函数
		function 函数名称( ){
			函数体----重复执行的代码
		}

		调用
			函数名称()

		练习：使用函数封装10+20的结果，并打印出来。调用3次

		function sum(i,j){
			console.log(i+j);
		}

	（2）创建带有参数的函数
		function(参数列表){
			函数体
		}

		调用
			函数名称(参数列表)
		创建函数是的参数叫形参，也称为形式上的参数，用于接收数据。调用函数时的参数叫实参，这才是实际传递的数据

		+-------------------------------------------------------------------------
		| 注意：形参就相当于是声明未赋值的变量；实参的个数如果少于形参，则未赋值的形参
		| 就是undefined
		+----------------------------------------------------------------------------

		练习：创建函数getSum,传递一个参数，计算1~任意数字之间所有数字的和

		function getSum(len){
			for(var i=1,sum=0;i<=len;i++){
				sum+=i;
			}
			console.log(sum);
		}

		getSum(100);

		练习：创建函数getLeap,传递2个参数，计算任意两个年份之间的闰年个数

		function getLeap(i,j){
			for(var k=i,count=0;k<=j;k++){
				if(k%4==0&&k%100!=0||k%400==0){
					count++;
				}
			}
			console.log(count);
		}

	（3）带有返回值得函数
		function 函数名称（参数列表）{
			函数体
			return 返回值；
		}

		调用：
			函数名称();
		return 表示函数执行后的返回结果。

		+------------------------------------------------------------------
		| 注意：
		|  1.使用return目的。为了保存函数的调用结果
		|  2.return后的所有代码都无法执行，return有终止函数的执行
		|  3.如果函数中没有return。或者return后没有加任何的值，则返回undefined。
		+------------------------------------------------------------------------

		练习：创建函数，传递2个参数，返回任意两个数字的最大值
		function compare(i,j){
			if(i>j) return i;
			return j;
		}


		练习：创建函数，传递两个参数，返回任意3个数字的最大值

		function compare(i,j,k){
			if(i>j){
				if(i>k) return i;
				return k;
			}else if(i<j){
				if(j>k) return j;
				return k;
			}
		}

		练习：创建函数，传递一个参数（状态码），根据订单状态码，返回对应的中文，
		1-待付款 2-待发货 3-运输中 4-已签收 其他-无法追踪

		function(status){
			var s = "";
			if(status==1){
				s="待付款";
			}else if(status==2){
				s="待发货";
			}else if(status==3){
				s="运输中";
			}else if(status==4){
				s="已签收";
			}else{
				s="无法追踪";
			}

			return s;
		}

		+------------------------------------------------------
		| 对比return、break、和continue
		| 	return 用于函数中，可以终止函数执行，并返回结果
		| 	break用于终止循环，终止switch语句
		| 	continue 用于跳过某一次循环，还会继续下一次循环
		+---------------------------------------------------------

2.变量的作用域
	+------------------------------------------------------
	|（1）作用域
	|	变量或者函数的可访问范围
	|	全局作用域：在全局作用域下声明的变量可以在任意位置访问到
	|	函数作用域：在函数作用域下声明的变量只能在函数内部访问
	+------------------------------------------------------------

	在函数中，不加var声明的变量就是全局变量

	+-----------------------------------------------------------------------
	| 			全局作用域                 			函数作用域
	|加var		全局变量,存在变量声明提升 			    局部变量，存在变量声明提升
	|不加var		全局变量，不存在变量的声明的提升 	    全局变量，不存在变量的声明的提升 
	+-----------------------------------------------------------------------------

	（2）变量提升
		JS程序在执行前，会查找当前作用域下使用var声明的变量，把声明提升到当前作用域最前边，赋值还是在原来位置、      -----------                             ---------  

		//var a;自动提升的变量
		console.log(a);
		var a = 1;

3.函数作用域		
	+-----------------------------------------------------------------
	|函数和变量一样，也存在全局作用域和函数作用域
	|全局下的函数可以在任意位置调用，函数中创建的函数只能在函数内部调用
	|函数提升
	| 函数提升：在程序执行前，检查使用function关键字创建的函数，提升到所在作用域的最前面
	+--------------------------------------------------------------------------------

4.递归
	函数在内部调用自身
	递归在使用的时候，要有结束的条件；结合return使用

课后任务
	（1）复习
	（2）练习
		创建函数，传递一个参数（n），计算！n+!(n-1)+...!2+!1
		!3 = 3*2*1
	（3）对象，匿名函数

	function factorial(n) {
		for (var i = n,sum = 0; i >= 1; i--) {
			sum+=fun1(i);
		}

		console.log(sum);
	}

	function fun1(n) {
		for (var i = n, f = 1; i >= 1; i--) {
			f *= i
		}
		return f;
	}

	factorial(3);


		


