笔记

1. 数据类型
	分为原始类型和引用类型
	原始类型分为数值类型、字符串型、布尔型、未定义型、空（null）

	（1）数值型
		分为整型和浮点型
		整型在内存中占4个字节，浮点型占8个字节
		8进制，以0 开头，例如 012 -> 10
		16进制，以0x 开头，例如0xF -> 15
		A - F 代表 10~15 不区分大小写
		0xFF -> 255

		浮点型
		浮点型分为普通小数和指数型小数
		1234.56 -> 1.23456e3 -> 1.23456*10^3
		0.0000034 -> 3.4e-6 -> 3.4*10^-6

	（2）字符串型
		数据被引号所包含就是字符串类型，不区分单双引号
		typeof(数据)  检测数据的类型，数值型 -> number 字符串型 -> string 

		查看某个字符的Unicode码
		"华".charCodeAt();//返回一个数字

	（3）布尔型
		在程序中表示真或假的结果
		true、false
		常用于一些是否结果，例如：是否为会员、是否注册、是否在线
		isMember = true，  isOnline = false；
		typeof(true) = boolean	

	（4）未定义型
		声明了变量未赋值，结果就是未定义型，只有一个值undefined

	（5）空
		常用于和引用类型一起使用，只有一个值null

		+----------------------------------
		| typeof(数据) 检测数据的类型
		| 数值型 -> number
		| 字符串型 -> string
		| 布尔型 -> boolean
		| 未定义型 -> undefined
		| 空 -> object
		+-------------------------------

2. 数据类型转换
	（1）隐式转换
		a.数值型+字符串型：数值型被转成了字符串型
		1+"2" //"12"

		b.数值型+布尔型：布尔型被转成了数值型 true -> 1 / false -> 0
		3+true  //4

		c.布尔型+字符串型：布尔型被转成了字符串型 true -> "true"
		true+'hello'	//truehello

		d.字符串型+字符串型：
		"a"+"b"  //"ab"

		js中加号（+）的作用
		执行加法运算；执行字符串的拼接

	（2）强制转换
		a.将任意数据转成数值型
		Number()
		Number("1")//1
		Number("1a")//NAN
		Number(undefined)//NAN
		Number(null)//0
		Number(true)//true -> 1 / false -> 0

		练习：计算'3'-1、'2a'/5、true-null
		console.log('3'-1,typeof('3'-1));			//2 -> number
		console.log('2a'/5,typeof('2a'/5));			//NaN -> number
		console.log(true-null,typeof(true-null));	//1 -> number

		结论：在执行减、乘、除运算的时候，如果数据不是数值型，则自动调用number转成字符型

		b.将任意数据转成为整型
		parseInt("4a")///4
		parseInt("a4")///NaN
		转换规则：如果要转的数据是字符串，从开头开始查找数字，遇到小数点或者非数字，则返回前边的数字
		否则开头不是数字，返回NaN,如果是布尔型，未定义型，空，返回的都是NaN

		c.将任意数据转为浮点型
		parseFloat("4.5a");//4.5
		转化规则：和parseInt基本一致，只是可以转化成浮点型

		d.将数值型和布尔型转为字符串型
		toString();
		var a =2;
		a.toString();//"2"
		a.toString(16);如果要转的数据是数值，可以设置进制（2,8,16）


3. 运算符
	由运算符连接的操作数据，所组成的结构称为表达式

	（1）算数运算符
		+ - * / % ++ --

		% 取余
		++ 自增，在原来的基础之上加一
		-- 自减，在原来的基础之上减一

		console.log(a++);先打印a的值，再执行自增
		console.log(++a);先执行自增，再答应a的值

	（2）比较运算符
		> < >= <= == != ===（全等于） !==（不全等于）

		== 只是比较两个数据的值是否相同
		=== 不仅比较值，还会比较数值类型

		"3" > "4" //true
		两个字符串比较，比较的是Unicode码

		3 -> 51		1 -> 49

		'张无忌' > '张翠山'//false
		如果首个字符相同，会继续往后比较

		console.log(3>'10a',3<'10a',3=='10a');

		+------------------------------------------------
		| 数值和字符串比较，字符串自动调用Number转为数值型
		+----------------------------------------------------

		'10a' -> NaN NaN和任何值比较，包括自身，都返回false
		除非 3 != "4a" -> true

	（3）逻辑运算符
		&& 并且，关联的两个条件都是true,结果才是true,否则false
		|| 或者，关联的两个条件只要有用一个为true，结果就是true，否则false
		！ 取反，！true=false  !false= true

		练习：声明两个变量保存用户名和密码，如果用户名是'root',并且密码是'123456',打印true，否则打印false

		var username = "root";
		var password = "123456";
		console.log(username == "root" && password = "123456");

		练习：声明一个变量保存年龄，如果年龄90岁以上，或者3岁以下，打印true，否则false

		var age = 25;
		console.log(age > 90 || age < 3);

		逻辑短路
			&& 当第一个条件为false，就不需要继续执行第二个条件
			|| 当第一个条件为true，则不需要执行第二个条件

	（4）位运算符（了解）
		在执行运算的时候，把数字转成二进制再进行运算
		1 10 11 100 101 110 111 1000 1001 1010 1011

		按位与（&）上下两位都为1，结果为1，否则0
		按位或（|）上下两位含有1，结果1，否则0
		按位右移（>>）删除二进制的最后的n位
		按位左移（<<）在二进制的最后添加n个0


课后任务
	（1）复习今天的内容，整理思维导图
	（2）练习
		声明一个变量保存年份，判断这个年份是否为闰年，如果是打印闰年
		闰年的判断条件

	（3）预习if、 if-else、 if-else嵌套、 switch语句

	①非整百年能被4整除的为闰年。（如2004年就是闰年,2100年不是闰年）
	②能被400整除的是闰年。(如2000年是闰年，1900年不是闰年)
	
	var year;

	year%4==0
	year%400==0
	year%3200==0&&year%172800==0

	var year= 2004;
	(year%400==0 || (year%100!=0&&year%4==0)) && console.log("闰年");

		









